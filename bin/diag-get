#!/usr/bin/python
#
# diag-get - kredgate - 01-23-2014
#
# Get a file from a specific diagnostic bucket on S3 using
# credentials provided by the appliance service at Carbonite.
#
# The file is put in the diagnostics bucket under
# a path using the SMBIOS system UUID.
#

import sys
sys.path.append('/usr/share/pyshared')

import os
import sys
from subprocess import *
from syslog import *

import boto
import simplejson
import urllib2
import urllib

from carboniteappliance.config import load_config

config = load_config()

def report(message):
    if sys.stdout.isatty():
        print message

def die(message):
    if sys.stdout.isatty():
        print >> sys.stderr, message
    else:
        syslog( LOG_ERR, message )
    sys.exit( 1 )

openlog( 'get-s3', LOG_PID, LOG_CRON )

if len(sys.argv) < 2:
    syslog( LOG_ERR, "called without resource-key argument" )
    print >> sys.stderr, 'usage: get-s3 <uuid> <resource-key> <filename>'
    sys.exit( 1 )

systemid = sys.argv[1]
# validate uuid format - seems to error on api if it is not
resource = sys.argv[2]

# accept third arg as target filename, if not present then use
# the S3 resource name
try:
    filename = sys.argv[3]
except:
    filename = resource

report( 'attempting download of ' + resource )

api_uri = config.APP_SERVER_URL + '/v1'
log_token_url = api_uri + '/diagnostics/appliances/' + systemid + '/log'

# what exceptions should be caught here
try:
    request = urllib2.Request( url=log_token_url, data='' )
    fd = urllib2.urlopen( request )
except urllib2.URLError as e:
    print >> sys.stderr, "failed to get token: "
    raise

token = simplejson.loads( fd.read() )

connection = boto.connect_s3(
    aws_access_key_id     = token['accessKey'],
    aws_secret_access_key = token['secretKey'],
    security_token        = token['sessionToken'],
    host                  = token['host']
)

bucket = connection.get_bucket( token['bucket'], validate=False )
keyname = token['root'] + '/' + resource

# I would like this exception handling to be better - but
# boto exceptions are unclear (and according to what I read
# online - they are poorly designed)
try:
    key = bucket.get_key( keyname )
except boto.exception.S3ResponseError:
    die( "Key does not exist: " + keyname )

if key is None:
    die( "Key does not exist: " + keyname )

report( 'downloading ' + keyname + ' as file ' + filename )
result = key.get_contents_to_filename( filename )

# vim:autoindent
# vim:expandtab
